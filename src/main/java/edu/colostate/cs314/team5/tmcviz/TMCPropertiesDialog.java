package edu.colostate.cs314.team5.tmcviz;

import edu.colostate.cs314.team5.tmcviz.reflect.ReflectionSimulator;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import lombok.extern.slf4j.Slf4j;

/**
 *
 * @author tim
 */
@Slf4j
public class TMCPropertiesDialog extends JDialog {

	private TMCFrame frame;
	
	public TMCPropertiesDialog(TMCFrame frame) {
		super(frame, true);
		
		this.frame = frame;
		
		initComponents();
		
		this.setLocationRelativeTo(frame);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileLabel = new JLabel();
        fileField = new JTextField();
        fileBrowseButton = new JButton();
        classLabel = new JLabel();
        saveButton = new JButton();
        cancelButton = new JButton();
        classField = new JTextField();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("TMCViz Properties");
        setResizable(false);

        fileLabel.setText("Jarfile:");

        fileBrowseButton.setText("Browse...");
        fileBrowseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                fileBrowseButtonActionPerformed(evt);
            }
        });

        classLabel.setText("TMCSimulator:");

        saveButton.setText("Save");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(classLabel)
                            .addComponent(fileLabel))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(fileField, GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                            .addComponent(classField))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileBrowseButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLabel)
                    .addComponent(fileField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileBrowseButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(classLabel)
                    .addComponent(classField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void scan(File f) {
		if (!classField.getText().trim().isEmpty()) {
			return;
		}
		
		try (FileInputStream fis = new FileInputStream(f)) {
			ZipInputStream in = new ZipInputStream(fis);
			
			ZipEntry e;
			while ((e = in.getNextEntry()) != null) {
				System.out.println(e.getName());
				if (e.getName().equals("TMCSimulator.class")
						|| e.getName().endsWith("/TMCSimulator.class")) {
					String name = e.getName().substring(0, e.getName().length() - 6);
					name = name.replace('/', '.');
					
					classField.setText(name);
					
					return;
				}
			}
		} catch (Exception ex) {
			log.warn("Unable to read jarfile", ex);
		}
	}
	
    private void fileBrowseButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_fileBrowseButtonActionPerformed
		JFileChooser chooser = new JFileChooser(TMCFrame.lastDirectory);
		chooser.setFileFilter(new FileNameExtensionFilter("Jarfiles", new String[] { "jar" }));
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			File f = chooser.getSelectedFile();
			
			TMCFrame.lastDirectory = f.getParentFile();
			fileField.setText(f.getPath());
			scan(f);
		}
    }//GEN-LAST:event_fileBrowseButtonActionPerformed

    private void saveButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
			File f = new File(fileField.getText());
			String clazz = classField.getText();
			ReflectionSimulator sim = new ReflectionSimulator(f, clazz);
			frame.setSimulator(sim);
			frame.configured();
			
			dispose();
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(
					this,
					"Error loading TMCSimulator class: " + ex.getMessage(),
					"Error",
					JOptionPane.ERROR_MESSAGE);
			log.error("Error loading TMCSimulator class", ex);
		}
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton cancelButton;
    private JTextField classField;
    private JLabel classLabel;
    private JButton fileBrowseButton;
    private JTextField fileField;
    private JLabel fileLabel;
    private JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
